// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/**
 * ===================== Enums =====================
 */

enum InstitutionType {
  SCHOOL
  COLLEGE
}

enum RoleType {
  STUDENT
  FACULTY
  PARENT
  ADMIN
}

/**
 * ===================== Infrastructure =====================
 */

/**
 * For pretty IDs like USR000001 / INS000001 / INV000001
 */
model Sequence {
  model String @id // e.g., "user", "institution", "invite"
  next  Int
}

/**
 * ===================== Core =====================
 */

model Institution {
  id        Int             @id @default(autoincrement())
  publicId  String          @unique @db.VarChar(16) // INS000001
  name      String
  type      InstitutionType
  city      String? // City/Location
  board     String? // for schools (CBSE/ICSE/etc.)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  users    User[]
  invites  Invite[]
  sections Section[]
}

model User {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @db.VarChar(16) // USR000001
  email     String   @unique
  fullName  String
  password  String
  roleType  RoleType
  status    String   @default("active")
  phone     String?  @unique // useful for parents/faculty - UNIQUE to identify parent users
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  institutionId Int?
  institution   Institution? @relation(fields: [institutionId], references: [id])

  // Role-specific profiles (0/1 each depending on roleType + institution type)
  studentSchoolProfile  StudentSchoolProfile?
  studentCollegeProfile StudentCollegeProfile?
  facultySchoolProfile  FacultySchoolProfile?
  facultyCollegeProfile FacultyCollegeProfile?
  parentProfile         ParentProfile?
  adminProfile          AdminProfile?

  // Parent linking (many students per parent; many parents per student)
  guardianships StudentGuardian[] @relation("ParentLinks")
  wards         StudentGuardian[] @relation("StudentLinks")

  // Attendance relations
  enrollments        Enrollment[]        @relation("StudentEnrollments")
  facultySections    FacultySection[]    @relation("FacultyAssignments")
  attendanceSessions AttendanceSession[] @relation("FacultyAttendanceSessions")
}

/**
 * ===================== Invites =====================
 */

model Invite {
  id             Int          @id @default(autoincrement())
  publicId       String       @unique @db.VarChar(16) // INV000001
  code           String       @unique
  institutionId  Int?
  institution    Institution? @relation(fields: [institutionId], references: [id])
  allowedRoles   String // JSON string e.g. '["STUDENT","FACULTY"]'
  allowedDomains String? // JSON string e.g. '["school.edu"]'
  maxUses        Int          @default(1)
  usedCount      Int          @default(0)
  expiresAt      DateTime?
  createdAt      DateTime     @default(now())
}

/**
 * ===================== Profiles: Students =====================
 */

model StudentSchoolProfile {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])

  institutionType InstitutionType @default(SCHOOL)
  schoolName      String
  board           String // CBSE/ICSE/State board - now required
  class           String // e.g., "10"
  section         String // e.g., "A" - now required
  rollNo          String
  dob             DateTime

  // Parent/Guardian information (stored here for easy access)
  // Optional to handle existing records, but required for new imports
  parentName      String?
  parentEmail     String?
  parentPhone     String?
}

model StudentCollegeProfile {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])

  institutionType InstitutionType @default(COLLEGE)
  collegeName     String
  department      String
  yearOfStudy     Int // 1..8
  semester        Int // 1..16 - now required
  section         String? // "A", "B", "C", "D" - for section assignment (AICTE: 60 per section)
  batch           String? // "Morning", "Evening", "Weekend" - for shift-based colleges
  regNo           String // roll/registration no
  dob             DateTime? // Optional to handle existing records without DOB
}

/**
 * ===================== Profiles: Faculty =====================
 */

model FacultySchoolProfile {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])

  institutionType InstitutionType @default(SCHOOL)
  schoolName      String
  department      String // English, Physics, Mathematics, etc.
  employeeId      String          @unique
  qualification   String          @default("Not Specified") // B.Ed, M.Ed, Ph.D, etc.
  joiningDate     DateTime? // Date when faculty joined the institution

  @@index([employeeId])
}

model FacultyCollegeProfile {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])

  institutionType InstitutionType @default(COLLEGE)
  collegeName     String
  department      String // CSE, Mechanical, Civil, etc.
  designation     String // Professor, Assistant Professor, Lecturer, etc.
  employeeId      String          @unique
  qualification   String          @default("Not Specified") // B.Tech, M.Tech, Ph.D, etc.
  joiningDate     DateTime? // Date when faculty joined the institution

  @@index([employeeId])
}

/**
 * ===================== Profiles: Parent & Linking =====================
 */

model ParentProfile {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])

  // Parent phone we keep on User.phone too, but duplicating here is fine if needed
  // Student link can be added via StudentGuardian (below).
  // Provisional fields if student account not present yet:
  provisionalStudentName   String?
  provisionalStudentClass  String?
  provisionalStudentRollNo String?
  provisionalStudentDob    DateTime?
}

/**
 * M2M: Parent â†” Student
 */
model StudentGuardian {
  id            Int     @id @default(autoincrement())
  parentUserId  Int
  studentUserId Int
  relation      String? // father/mother/guardian/etc.

  parent  User @relation("ParentLinks", fields: [parentUserId], references: [id])
  student User @relation("StudentLinks", fields: [studentUserId], references: [id])

  @@unique([parentUserId, studentUserId])
}

/**
 * ===================== Profiles: Admin =====================
 */

model AdminProfile {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])

  institutionType InstitutionType? // optional if admin is global
  institutionName String?
  institutionCity String? // City/Location of institution
  designation     String? // Principal / Registrar / Dept Admin
  department      String? // if college admin
  board           String? // if school admin (CBSE/ICSE/State board)
}

/**
 * ===================== OTP/Verification =====================
 */

model OTP {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String   @db.VarChar(6)
  purpose   String   @default("signup") // signup, reset-password, etc.
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email, purpose])
}

/**
 * ===================== Attendance System =====================
 */

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

/**
 * Section - Unified for both School & College
 * School: "Class 10 A"
 * College: "CSE 3rd Year Sem 3 Section A Morning Batch"
 */
model Section {
  id       Int    @id @default(autoincrement())
  publicId String @unique @db.VarChar(16) // SEC000001
  name     String // "Class 10 A" or "CSE Year 2 Sem 3 - Section A - Morning"

  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])

  // For schools
  schoolClass   String? // "10", "11", "12"
  schoolSection String? // "A", "B", "C"
  board         String? // "CBSE", "ICSE", "State"

  // For colleges
  department     String? // "CSE", "Mechanical", "Civil"
  yearOfStudy    Int? // 1, 2, 3, 4
  semester       Int? // 1-8
  collegeSection String? // "A", "B", "C", "D" - for dividing large departments (AICTE: 60 per section)
  batch          String? // "Morning", "Evening", "Weekend" - for shift-based colleges
  sectionType    String? // "Theory", "Lab", "Tutorial", "Elective" - for different class types
  maxCapacity    Int? // Enrollment limit (typically 60 for theory, 20-30 for lab/tutorial)
  roomNumber     String? // Classroom/Lab assignment

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments        Enrollment[]
  facultySections    FacultySection[]
  attendanceSessions AttendanceSession[]

  @@index([institutionId])
}

/**
 * Enrollment - M2M between Student and Section
 * A student can be enrolled in multiple sections (different subjects)
 * A section has multiple students
 */
model Enrollment {
  id Int @id @default(autoincrement())

  studentUserId Int
  student       User @relation("StudentEnrollments", fields: [studentUserId], references: [id])

  sectionId Int
  section   Section @relation(fields: [sectionId], references: [id])

  enrolledAt DateTime @default(now())
  isActive   Boolean  @default(true)

  // Relations
  attendancePunches AttendancePunch[]

  @@unique([studentUserId, sectionId])
  @@index([studentUserId])
  @@index([sectionId])
}

/**
 * FacultySection - M2M between Faculty and Section
 * A faculty can teach multiple sections
 * A section can have multiple faculty (different subjects)
 */
model FacultySection {
  id Int @id @default(autoincrement())

  facultyUserId Int
  faculty       User @relation("FacultyAssignments", fields: [facultyUserId], references: [id])

  sectionId Int
  section   Section @relation(fields: [sectionId], references: [id])

  subject    String? // "Mathematics", "Physics", "Data Structures"
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)

  @@unique([facultyUserId, sectionId, subject])
  @@index([facultyUserId])
  @@index([sectionId])
}

/**
 * AttendanceSession - A specific attendance-taking session
 * Created by faculty for a specific section on a specific date
 */
model AttendanceSession {
  id       Int    @id @default(autoincrement())
  publicId String @unique @db.VarChar(16) // ATT000001

  sectionId Int
  section   Section @relation(fields: [sectionId], references: [id])

  facultyUserId Int
  faculty       User @relation("FacultyAttendanceSessions", fields: [facultyUserId], references: [id])

  date    DateTime @default(now())
  subject String? // Optional: which subject/period
  notes   String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  punches AttendancePunch[]

  @@index([sectionId, date])
  @@index([facultyUserId])
}

/**
 * AttendancePunch - Individual attendance record for a student in a session
 */
model AttendancePunch {
  id Int @id @default(autoincrement())

  sessionId Int
  session   AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  enrollmentId Int
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])

  status  AttendanceStatus
  remarks String?          @db.Text

  markedAt DateTime @default(now())

  @@unique([sessionId, enrollmentId])
  @@index([sessionId])
  @@index([enrollmentId])
}
